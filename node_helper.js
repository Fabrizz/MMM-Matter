/*
  ┌────────────────────────────────────────────────────────────────┐
  │                    MMM-Matter by Fabrizz <3                    │
  │              https://github.com/Fabrizz/MMM-Matter             │
  │                        (c) Fabrizio Bap                        │
  │                                                                │
  ├─ Version 1.0.0 MIT License                                     │
  └────────────────────────────────────────────────────────────────┘
*/

// [⚠] This file is auto-generated. DO NOT EDIT.

var _=Object.create;var x=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var B=Object.getOwnPropertyNames;var P=Object.getPrototypeOf,q=Object.prototype.hasOwnProperty;var G=(r,e,o,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of B(e))!q.call(r,s)&&s!==o&&x(r,s,{get:()=>e[s],enumerable:!(t=D(e,s))||t.enumerable});return r};var l=(r,e,o)=>(o=r!=null?_(P(r)):{},G(e||!r||!r.__esModule?x(o,"default",{value:r,enumerable:!0}):o,r));var k=l(require("node_helper")),d=l(require("logger")),v=l(require("express")),b=l(require("path")),A=require("events");var i={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",FG:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m",gray:"\x1B[90m",crimson:"\x1B[38m"},BG:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m",gray:"\x1B[100m",crimson:"\x1B[48m"}};var F=l(require("logger"));var n=require("@matter/main"),m=require("@matter/main/protocol"),y=require("@matter/main/endpoints/aggregator"),$=require("@matter/main/types"),R=require("@matter/main/behaviors/bridged-device-basic-information"),T=require("@matter/main/devices/on-off-plug-in-unit"),V=`${i.reset}[${i.FG.magenta}MMM-Matter${i.reset}] (${i.FG.green}MatterServer${i.reset})`,u=class{constructor(e,o,t,s,a,c){this.environment=n.Environment.default,this.environment.vars.set("storage.path",o),F.info(`${V} Store path updated. ${i.FG.gray}${o}${i.reset}`),c&&this.environment.vars.set("mdns.networkInterface",c),this.mdnsInterface=c,this.environment.vars.set("log.level",t),this.environment.vars.set("log.format",s),this.storageService=this.environment.get(n.StorageService),this.moduleStorageService=e,this.moduleVersionString=a}async startServerNode(){let e="MMM-Matter Bridge",o="MMM Bridge",t="fabrizz",a=(await this.storageService.open("device")).createContext("data"),c=await a.get("passcode",20202021),O=await a.get("discriminator",3840),M=await a.get("vendorid",65521),L=await a.get("productid",32768),f=await a.get("uniqueid",n.Time.nowMs().toString());if(await a.set({passcode:c,discriminator:O,vendorid:M,productid:L,uniqueid:f}),this.serverNode=await n.ServerNode.create({id:f,network:{port:5540},commissioning:{passcode:c,discriminator:O},productDescription:{name:o,deviceType:y.AggregatorEndpoint.deviceType},basicInformation:{vendorName:t,vendorId:(0,$.VendorId)(M),nodeLabel:e,productName:e,productLabel:e,productId:L,serialNumber:`MMM-MATTER-${f}`,uniqueId:f,hardwareVersionString:this.moduleVersionString,softwareVersionString:this.moduleVersionString,hardwareVersion:1,softwareVersion:1,productUrl:"https://github.com/Fabrizz/MMM-Matter",reachable:!0}}),this.serverAggregator=new n.Endpoint(y.AggregatorEndpoint,{id:"aggregator"}),await this.serverNode.add(this.serverAggregator),await this.addSavedEndpointsToServer(),this.serverNode.lifecycle.commissioned.on(()=>console.log("Server was initially commissioned successfully!")),this.serverNode.lifecycle.decommissioned.on(()=>console.log("Server was fully decommissioned successfully!")),this.serverNode.lifecycle.online.on(()=>{console.log("Server is online"),console.log("Initial Fabrics when coming online",this.serverNode.state.commissioning.fabrics)}),this.serverNode.lifecycle.offline.on(()=>console.log("Server is offline")),this.serverNode.events.commissioning.fabricsChanged.on((p,N)=>{let h="";switch(N){case m.FabricAction.Added:h="added";break;case m.FabricAction.Removed:h="removed";break;case m.FabricAction.Updated:h="updated";break}console.log(`Commissioned Fabrics changed event (${h}) for ${p} triggered`,this.serverNode.state.commissioning.fabrics[p])}),await this.serverNode.start(),(0,m.logEndpoint)(n.EndpointServer.forEndpoint(this.serverNode)),this.serverNode.lifecycle.isCommissioned)console.log("Device is already commissioned. Waiting for controllers to connect ...");else{let{qrPairingCode:p,manualPairingCode:N}=this.serverNode.state.commissioning.pairingCodes;console.log(`QR Code URL: https://project-chip.github.io/connectedhomeip/qrcode.html?data=${p}`),console.log(`Manual pairing code: ${N}`)}}async addSavedEndpointsToServer(){let e="OnOff light",o=new n.Endpoint(T.OnOffPlugInUnitDevice.with(R.BridgedDeviceBasicInformationServer),{id:"onoff-1",bridgedDeviceBasicInformation:{nodeLabel:e,productName:e,productLabel:e,serialNumber:"node-matter-1",reachable:!0}});await this.serverAggregator.add(o),o.events.identify.startIdentifying.on(()=>{console.log(`Run identify logic for ${e}, ideally blink a light every 0.5s ...`)}),o.events.identify.stopIdentifying.on(()=>{console.log(`Stop identify logic for ${e} ...`)}),o.events.onOff.onOff$Changed.on(t=>{console.log(`${e} is now ${t?"ON":"OFF"}`)})}};var g=require("node-persist"),E=b.join(__dirname,"/module-store"),C=b.join(__dirname,"/matter-store"),w=b.join(__dirname,"client","dist"),I="1.0.0",S=`${i.reset}[${i.FG.magenta}MMM-Matter${i.reset}] (NodeHelper)`;g.init({dir:E}).then(async()=>{d.info(`${S} Module store initiated. ${i.FG.gray}Path: ${E}${i.reset}`),await g.getItem("isFirstSession")===void 0&&await g.setItem("isFirstSession",!0)});module.exports=k.create({start(){d.log(`${S} ${i.FG.black}${i.BG.white} ⠖ MMM-Matter by Fabrizz ${i.reset} Node helper loaded.`),this.VERSION=I||"",this.frontendReady=!1,this.apiEventsConsumers=new Map,this.events=new A.EventEmitter,this.translations={},this.matterServer=null;let r=v.Router(),e=v.Router();e.route("/version").get((o,t)=>{t.send(this.VERSION)}),e.route("/paths").get((o,t)=>{t.send({PATH_MODULE_STORE:E,PATH_MATTER_STORE:C,PATH_CLIENT_DIST:w})}),e.route("/translations").get((o,t)=>{t.send(this.translations)}),e.route("/store").get(async(o,t)=>{t.send(await g.keys())}),e.route("/store/:key").get(async(o,t)=>{t.send(await g.getItem(o.params.key))}),e.route("/state/:deviceId").get((o,t)=>{t.send({data:"test",ts:Date.now()})}),e.get("/events",async(o,t)=>{t.set({"Content-Type":"text/event-stream","Cache-Control":"no-cache",Connection:"keep-alive","Access-Control-Allow-Origin":"*"}),t.flushHeaders(),t.write(`retry: 10000

`);let s=Date.now().toString(16);this.apiEventsConsumers.set(s,t),t.on("close",()=>this.apiEventsConsumers.delete(s))}),r.use("/",v.static(w)),r.use("/api",e),this.expressApp.use("/matter",r),d.info(`${S} Started frontend. ${i.FG.gray}Build path: ${w}${i.reset}`)},socketNotificationReceived:async function(r,e){switch(r){case"FRONTEND_READY":this.frontendReady?d.info(`${S} Frontend has been reloaded.`):(this.frontendReady=!0,this.matterServer=new u(g,C,e.matterLogLevel,e.matterLogFormat,I),this.matterServer.startServerNode());break;case"FRONTEND_TRANSLATIONS":this.translations=e,this.sendToClientEventStream("RELOAD_FRONTEND");break;case"NOTIFICATION_FORBACKEND":d.debug("NOTIFICATION_FORBACKEND",`__${e.tag} 
`,JSON.stringify(e)),this.events.emit(`__${e.tag}`,e);break}},sendToMM2EventStream(r,e={}){this.sendToClientEventStream("CONTROL_MODULES",{tag:r,payload:e}),this.sendSocketNotification("CONTROL_MODULES",{tag:r,payload:e})},sendToClientEventStream(r,e={}){this.apiEventsConsumers.forEach(o=>o.write(`data: ${JSON.stringify({tag:r,payload:e})}

`))}});
//# sourceMappingURL=data:application/json;base64,
