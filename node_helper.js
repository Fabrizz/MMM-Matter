/*
  ┌────────────────────────────────────────────────────────────────┐
  │                    MMM-Matter by Fabrizz <3                    │
  │              https://github.com/Fabrizz/MMM-Matter             │
  │                        (c) Fabrizio Bap                        │
  │                                                                │
  ├─ Version 1.0.0 MIT License                                     │
  └────────────────────────────────────────────────────────────────┘
*/

// [⚠] This file is auto-generated. DO NOT EDIT.

var q=Object.create;var $=Object.defineProperty;var V=Object.getOwnPropertyDescriptor;var H=Object.getOwnPropertyNames;var J=Object.getPrototypeOf,W=Object.prototype.hasOwnProperty;var z=(i,e,o,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of H(e))!W.call(i,r)&&r!==o&&$(i,r,{get:()=>e[r],enumerable:!(t=V(e,r))||t.enumerable});return i};var y=(i,e,o)=>(o=i!=null?q(J(i)):{},z(e||!i||!i.__esModule?$(o,"default",{value:i,enumerable:!0}):o,i));var G=y(require("node_helper")),m=y(require("logger")),u=y(require("express")),L=y(require("path")),U=require("events");var n={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",FG:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m",gray:"\x1B[90m",crimson:"\x1B[38m"},BG:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m",gray:"\x1B[100m",crimson:"\x1B[48m"}};var A=y(require("logger"));var s=require("@matter/main"),N=require("@matter/main/protocol"),M=require("@matter/main/endpoints/aggregator"),I=require("@matter/main/types");var F=require("@matter/main");var E=class{constructor(e,o,t){this.device=e;this.sendModuleControl=o;this.events=t}async destroyEndpoint(){await this.endpoint.close()}};var k=require("@matter/main/devices/on-off-plug-in-unit"),C=require("@matter/main/behaviors/bridged-device-basic-information"),b=class extends E{constructor(e,o,t){super(e,o,t);let{nodeLabel:r,productName:a,productLabel:p,serialNumber:h}=e.matter;this.endpoint=new F.Endpoint(k.OnOffPlugInUnitDevice.with(C.BridgedDeviceBasicInformationServer),{id:e.id,bridgedDeviceBasicInformation:{nodeLabel:r,productName:a,productLabel:p,serialNumber:h,reachable:!0}});let{setOnWithNotification:l,setOffWithNotification:c,toggleWithNotification:f,setWithNotificationPayload:g,onOnSend:S,onOffSend:v,onToggleSend:_}=e.behavior;this.endpoint.events.onOff.onOff$Changed.on(d=>{_&&o(_,d),d&&S&&o(S),!d&&v&&o(v)}),l&&t.on(`__${l}`,()=>{this.endpoint.act(async d=>{await d.onOff.on()})}),c&&t.on(`__${c}`,()=>{this.endpoint.act(async d=>{await d.onOff.off()})}),f&&t.on(`__${f}`,()=>{this.endpoint.act(async d=>{await d.onOff.toggle()})}),g&&t.on(`__${g}`,d=>{this.endpoint.act(async R=>{d.payload?await R.onOff.on():await R.onOff.off()})})}};var j=`${n.reset}[${n.FG.magenta}MMM-Matter${n.reset}] (${n.FG.green}MatterServer${n.reset})`,w=class{constructor(e,o,t,r,a,p,h,l,c){this.endpoints=new Map;this.sendToClientEventStream=e,this.sendSocketNotification=o,this.events=t,this.environment=s.Environment.default,this.environment.vars.set("storage.path",a),A.info(`${j} Store path updated. ${n.FG.gray}${a}${n.reset}`),c&&this.environment.vars.set("mdns.networkInterface",c),this.mdnsInterface=c,this.environment.vars.set("log.level",p),this.environment.vars.set("log.format",h),this.storageService=this.environment.get(s.StorageService),this.moduleStorageService=r,this.moduleVersionString=l}async createServerNode(){let e="MMM-Matter Bridge",o="MMM Bridge",t="fabrizz",a=(await this.storageService.open("device")).createContext("data"),p=await a.get("passcode",20240303),h=await a.get("discriminator",3840),l=await a.get("vendorid",65521),c=await a.get("productid",32768),f=await a.get("uniqueid",s.Time.nowMs().toString());if(await a.set({passcode:p,discriminator:h,vendorid:l,productid:c,uniqueid:f}),this.serverNode=await s.ServerNode.create({id:f,network:{port:5540},commissioning:{passcode:p,discriminator:h},productDescription:{name:o,deviceType:M.AggregatorEndpoint.deviceType},basicInformation:{vendorName:t,vendorId:(0,I.VendorId)(l),nodeLabel:e,productName:e,productLabel:e,productId:c,serialNumber:`MMM-MATTER-${f}`,uniqueId:f,hardwareVersionString:this.moduleVersionString,softwareVersionString:this.moduleVersionString,hardwareVersion:1,softwareVersion:1,productUrl:"https://github.com/Fabrizz/MMM-Matter",reachable:!0}}),this.serverAggregator=new s.Endpoint(M.AggregatorEndpoint,{id:"aggregator"}),await this.serverNode.add(this.serverAggregator),this.serverNode.lifecycle.commissioned.on(()=>console.log("Server was initially commissioned successfully!")),this.serverNode.lifecycle.decommissioned.on(()=>console.log("Server was fully decommissioned successfully!")),this.serverNode.lifecycle.online.on(()=>{console.log("Server is online"),console.log("Initial Fabrics when coming online",this.serverNode.state.commissioning.fabrics)}),this.serverNode.lifecycle.offline.on(()=>console.log("Server is offline")),this.serverNode.events.commissioning.fabricsChanged.on((g,S)=>{let v="";switch(S){case N.FabricAction.Added:v="added";break;case N.FabricAction.Removed:v="removed";break;case N.FabricAction.Updated:v="updated";break}console.log(`Commissioned Fabrics changed event (${v}) for ${g} triggered`,this.serverNode.state.commissioning.fabrics[g])}),(0,N.logEndpoint)(s.EndpointServer.forEndpoint(this.serverNode)),this.serverNode.lifecycle.isCommissioned)console.log("Device is already commissioned. Waiting for controllers to connect ...");else{let{qrPairingCode:g,manualPairingCode:S}=this.serverNode.state.commissioning.pairingCodes;console.log(`QR Code URL: https://project-chip.github.io/connectedhomeip/qrcode.html?data=${g}`),console.log(`Manual pairing code: ${S}`)}}async startServerNode(){await this.serverNode.start()}async destroyServerNode(){await this.serverNode.close()}async eraseServerNode(){await this.serverNode.erase()}async addDeviceToBridge(e){let o,t=[e,(r,a={})=>{this.sendToClientEventStream("CONTROL_MODULES",{tag:r,payload:a}),this.sendSocketNotification("CONTROL_MODULES",{tag:r,payload:a})},this.events];switch(e.matter.type){case"switch.onoff":o=new b(...t);break}await this.serverAggregator.add(o.endpoint)}};var O=require("node-persist"),x=L.join(__dirname,"/module-store"),B=L.join(__dirname,"/matter-store"),D=L.join(__dirname,"client","dist"),P="1.0.0",T=`${n.reset}[${n.FG.magenta}MMM-Matter${n.reset}] (NodeHelper)`;O.init({dir:x}).then(async()=>{m.info(`${T} Module store initiated. ${n.FG.gray}Path: ${x}${n.reset}`)});module.exports=G.create({start(){m.log(`${T} ${n.FG.black}${n.BG.white} ⠖ MMM-Matter by Fabrizz ${n.reset} Node helper loaded.`),this.VERSION=P||"",this.frontendReady=!1,this.apiEventsConsumers=new Map,this.events=new U.EventEmitter,this.translations={},this.matterServer=null;let i=u.Router(),e=u.Router();e.route("/version").get((o,t)=>{t.send(this.VERSION)}),e.route("/paths").get((o,t)=>{t.send({PATH_MODULE_STORE:x,PATH_MATTER_STORE:B,PATH_CLIENT_DIST:D})}),e.route("/translations").get((o,t)=>{t.send(this.translations)}),e.route("/store").get(async(o,t)=>{t.send(await O.keys())}),e.route("/store/:key").get(async(o,t)=>{t.send(await O.getItem(o.params.key))}),e.route("/state/:deviceId").get((o,t)=>{t.send({data:"test",ts:Date.now()})}),e.get("/events",async(o,t)=>{t.set({"Content-Type":"text/event-stream","Cache-Control":"no-cache",Connection:"keep-alive","Access-Control-Allow-Origin":"*"}),t.flushHeaders(),t.write(`retry: 10000

`);let r=Date.now().toString(16);this.apiEventsConsumers.set(r,t),t.on("close",()=>this.apiEventsConsumers.delete(r))}),i.use("/",u.static(D)),i.use("/api",e),this.expressApp.use("/matter",i),m.info(`${T} Started frontend. ${n.FG.gray}Build path: ${D}${n.reset}`)},socketNotificationReceived:async function(i,e){switch(i){case"FRONTEND_READY":this.frontendReady?m.info(`${T} Frontend has been reloaded.`):(this.frontendReady=!0,this.matterServer=new w((o,t)=>this.sendToClientEventStream(o,t),(o,t)=>this.sendSocketNotification(o,t),this.events,O,B,e.matterLogLevel,e.matterLogFormat,P),await this.matterServer.createServerNode(),await this.matterServer.addDeviceToBridge({id:"onofftest",matter:{type:"switch.onoff",nodeLabel:"Test Switch",productName:"Test Switch",productLabel:"Test Switch",serialNumber:"1234567890"},behavior:{setOnWithNotification:"TEST_SET_ON",setOffWithNotification:"TEST_SET_OFF",onOnSend:"TEST_ON",onOffSend:"TEST_OFF"},description:{isUserDefined:!0,createdAt:Date.now(),updatedAt:Date.now()}}),await this.matterServer.startServerNode());break;case"FRONTEND_TRANSLATIONS":this.translations=e,this.sendToClientEventStream("RELOAD_FRONTEND");break;case"EXTERNAL_CONTROL":m.debug("NOTIFICATION_FORBACKEND",`__${e.tag} 
`,JSON.stringify(e)),this.events.emit(`__${e.tag}`,e),this.sendToClientEventStream("EXTERNAL_CONTROL",e);break;case"EXTERNAL_SUGGESTION":m.debug("EXTERNAL_SUGGESTION",e);break}},sendToClientEventStream(i,e={}){this.apiEventsConsumers.forEach(o=>o.write(`data: ${JSON.stringify({tag:i,payload:e})}

`))}});
//# sourceMappingURL=data:application/json;base64,
